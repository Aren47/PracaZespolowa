import 'package:flutter/material.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Task Manager',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: TaskManager(),
    );
  }
}

class Task {
  String name;
  String status;

  Task(this.name, this.status);
}

class TaskManager extends StatefulWidget {
  @override
  _TaskManagerState createState() => _TaskManagerState();
}

class _TaskManagerState extends State<TaskManager> {
  List<Task> tasks = [];
  TextEditingController taskController = TextEditingController();
  int editingIndex = -1;

  void addTask() {
    setState(() {
      String newTaskName = taskController.text;
      if (newTaskName.isNotEmpty) {
        tasks.add(Task(newTaskName, 'Nowy'));
        taskController.clear();
      }
    });
  }

  void editTask(int index) {
    setState(() {
      editingIndex = index;
    });
  }

  void saveEditedTask(int index) {
    setState(() {
      editingIndex = -1;
    });
  }

  void removeTask(int index) {
    setState(() {
      tasks.removeAt(index);
      if (editingIndex == index) {
        editingIndex = -1;
      }
    });
  }

  void changeStatus(int index, String newStatus) {
    setState(() {
      tasks[index].status = newStatus;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Task Manager'),
      ),
      body: Column(
        children: <Widget>[
          Padding(
            padding: const EdgeInsets.all(10.0),
            child: TextField(
              controller: taskController,
              decoration: InputDecoration(labelText: 'Dodaj nowe zadanie'),
            ),
          ),
          ElevatedButton(
            onPressed: addTask,
            child: Text('Dodaj zadanie'),
          ),
          Expanded(
            child: ListView.builder(
              itemCount: tasks.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text('Zadanie: ${tasks[index].name}\nStatus: ${tasks[index].status}'),
                  trailing: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      DropdownButton<String>(
                        value: tasks[index].status,
                        items: ['Nowy', 'W trakcie', 'Zaakceptowany', 'Uko≈Ñczony']
                            .map((String status) {
                          return DropdownMenuItem<String>(
                            value: status,
                            child: Text(status),
                          );
                        }).toList(),
                        onChanged: (String newStatus) {
                          changeStatus(index, newStatus);
                        },
                      ),
                      IconButton(
                        icon: Icon(Icons.edit),
                        onPressed: () => editTask(index),
                      ),
                      IconButton(
                        icon: Icon(Icons.delete),
                        onPressed: () => removeTask(index),
                      ),
                    ],
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
