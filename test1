import 'package:flutter/material.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Task Manager',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: TaskManager(),
    );
  }
}

class Task {
  String name;
  String status;
  DateTime reminderDate; // Dodane pole daty przypomnienia

  Task(this.name, this.status, {this.reminderDate});
}

class TaskManager extends StatefulWidget {
  @override
  _TaskManagerState createState() => _TaskManagerState();
}

class _TaskManagerState extends State<TaskManager> {
  List<Task> tasks = [];
  TextEditingController taskController = TextEditingController();
  TextEditingController editTaskController = TextEditingController();
  TextEditingController statusController = TextEditingController();
  TextEditingController reminderDateController = TextEditingController(); // Kontroler dla daty przypomnienia
  int editingIndex = -1;

  void addTask() {
    setState(() {
      String newTaskName = taskController.text;
      String newTaskStatus = statusController.text;
      DateTime newReminderDate = DateTime.tryParse(reminderDateController.text); // Parsowanie daty przypomnienia
      if (newTaskName.isNotEmpty) {
        tasks.add(Task(newTaskName, newTaskStatus, reminderDate: newReminderDate));
        taskController.clear();
        statusController.clear();
        reminderDateController.clear(); // Wyczyszczenie kontrolera daty przypomnienia
      }
    });
  }

  // Pozosta≈Çe metody (editTask, saveEditedTask, removeTask) pozostawiamy bez zmian

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Task Manager'),
      ),
      body: Column(
        children: <Widget>[
          Padding(
            padding: const EdgeInsets.all(10.0),
            child: TextField(
              controller: taskController,
              decoration: InputDecoration(labelText: 'Dodaj nowe zadanie'),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(10.0),
            child: TextField(
              controller: statusController,
              decoration: InputDecoration(labelText: 'Dodaj status'),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(10.0),
            child: TextField(
              controller: reminderDateController,
              decoration: InputDecoration(labelText: 'Termin przypomnienia (RRRR-MM-DD)'),
            ),
          ),
          ElevatedButton(
            onPressed: addTask,
            child: Text('Dodaj zadanie'),
          ),
          Expanded(
            child: ListView.builder(
              itemCount: tasks.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: editingIndex == index
                      ? TextField(
                          controller: editTaskController,
                          onEditingComplete: () => saveEditedTask(index),
                        )
                      : Text('Zadanie: ${tasks[index].name}\nStatus: ${tasks[index].status}\nTermin przypomnienia: ${tasks[index].reminderDate?.toLocal()}'),
                  trailing: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      IconButton(
                        icon: Icon(Icons.edit),
                        onPressed: () => editTask(index),
                      ),
                      IconButton(
                        icon: Icon(Icons.delete),
                        onPressed: () => removeTask(index),
                      ),
                    ],
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
